# -*- coding: utf-8 -*-
"""Real Estate Price Prediction (Machine Learning).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HMR6oFTOe7wWN3NBgdc7FLtAEtxdUm-B

Importing the Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.datasets import load_boston

"""Problem Statement



*   You have been given a dataset that decribes the fuctionality of houses. Now, based of the given features, you have to predict the house price.

Defining a dataframe
"""

boston = load_boston()
df = pd.DataFrame(boston.data)

"""EDA - Exploratory Data Analysis"""

df.head()

df.columns = boston.feature_names

df.head()

"""Adding a target column into the DataFrame"""

df['PRICE'] = boston.target

df.head()

df.tail()

df.shape

df.columns

df.dtypes

df.nunique()

df.isnull()

df.isnull().sum()

df.describe()

df.corr

plt.figure(figsize=(10,10))
sns.heatmap(data=df.corr(), annot=True, cmap='Greens')

sns.pairplot(df, size=5)

# Plot a Boxplot
plt.figure(figsize=(50,50))
df.boxplot()

# Minimum Price
df.PRICE.min()

# Maximum Price
df.PRICE.max()

# Standard Deviation()
df.PRICE.std()

"""Export the dataset"""

df.to_csv('boston_dataset.csv')

"""Machine Learning - Linear Regression"""

df.head()

X = np.array(df.drop('PRICE',axis=1))
Y = np.array(df.PRICE)

#X = boston.data
#Y = boston.target

"""Spliting the data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)

len(X_train)

len(Y_train)

len(X_test)

len(Y_test)

"""Choosing the model"""

model = LinearRegression()

"""Fitting/Training the  model"""

model.fit(X_train,Y_train)

# Intercept Value
model.intercept_

# Coefficeint Value
model.coef_

"""Prediction"""

Y_test

Y_pred = model.predict(X_test)

Y_pred

"""Testing the model performance"""

model.score(X_test,Y_test)

# R squared
r2_score(Y_test,Y_pred)

# Adjusted R squared

# MSE
mean_squared_error(Y_test,Y_pred)

#MAE
mean_absolute_error(Y_test,Y_pred)

# RMSE
np.sqrt(mean_squared_error(Y_test,Y_pred))

plt.scatter(Y_test,Y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.grid()
plt.plot([min(Y_test),max(Y_test)],[min(Y_pred),max(Y_pred)],color='green')
plt.title("Actual Price V/S Predicted Price")